{"ast":null,"code":"var _jsxFileName = \"/Users/valeriapalacios/Documents/Fall 2022/Junior Design/Get_In_Line/JIA-2500-main/get-in-line/src/pages/AdminPage.js\",\n    _s = $RefreshSig$();\n\nimport ReactDOM from \"react-dom\";\nimport React, { useEffect, useState, useID } from \"react\";\nimport GetInLineTitle from '../components/GetInLineTitle';\nimport { useNavigate } from 'react-router-dom';\nimport QRCode from 'react-qr-code';\nimport Event from '../components/Event';\nimport { auth, db, logout } from '../Firebase';\nimport { collection, doc, getDocs, query, setDoc, limit, onSnapshot, deleteDoc, updateDoc, where } from 'firebase/firestore';\nimport { async } from '@firebase/util';\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminPage() {\n  _s();\n\n  const [user, loading, error] = useAuthState(auth);\n  const [name, setName] = useState(\"\");\n  const navigate = useNavigate();\n\n  const fetchUserName = async () => {\n    try {\n      const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user === null || user === void 0 ? void 0 : user.uid));\n      const doc = await getDocs(q);\n      const data = doc.docs[0].data();\n      setName(data.name);\n    } catch (err) {\n      console.error(err);\n      alert(\"An error occured while fetching user data\");\n    }\n  };\n\n  useEffect(() => {\n    if (loading) return;\n    if (!user) return navigate(\"/\");\n    fetchUserName();\n  }, [user, loading]);\n  const [events, setEvents] = React.useState([]);\n  React.useEffect(() => {\n    const q = query(collection(db, \"event\"));\n    const eventList = onSnapshot(q, querySnapshot => {\n      let eventsArray = [];\n      querySnapshot.forEach(doc => {\n        eventsArray.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      setEvents(eventsArray);\n    });\n    return () => eventList();\n  }, []);\n\n  const handleDelete = async eventName => {\n    await deleteDoc(doc(db, \"event\", eventName));\n  }; // ----Dropdown code----\n\n\n  let options1 = events;\n  let options = [];\n\n  for (let i = 0; i < options1.length; i++) {\n    options[i] = {\n      label: options1[i].name,\n      value: options1[i].name\n    };\n  } //add empty string to events list to avoid errors with default state\n\n\n  options.unshift('');\n  const [value, setValue] = React.useState('');\n\n  const handleChange = selected => {\n    setValue(selected.target.value);\n  };\n\n  let eventName = value; // ----Dropdown code----\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GetInLineTitle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"queues\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event_container\",\n      children: events.map(event => /*#__PURE__*/_jsxDEV(Event //key={event.name}\n      , {\n        event: event,\n        handleDelete: handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => showExistingQueues(),\n      children: \"View Existing Queues\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \" Settings \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => goToUserPage(),\n      children: \" Go To User Page \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"dashboard__btn\",\n      onClick: logout,\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 39\n    }, this), \"Event Name* \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"eventName\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 57\n    }, this), \"Address \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 51\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => verifyEvent(),\n      children: \" Add Event \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => generateQR(),\n      children: \" Create QR Code \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"qrcode\",\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      label: \"Select an Event \",\n      options: options,\n      value: value,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 12\n    }, this), \"User Name* \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"UserName\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 20\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 55\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => verifyUserAdd(),\n      children: \" Add User \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => verifyUserRemove(),\n      children: \" Remove User \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this); // ----------------------- Functions -----------------------\n\n  function verifyUserAdd() {\n    var UserName = document.getElementById(\"UserName\").value;\n    var Event = eventName;\n\n    if (UserName.length === 0) {\n      alert(\"User Name is Required!\");\n      return;\n    } else if (Event == '') {\n      alert(\"Please Select an event\");\n      return;\n    } else {\n      addUser(Event, UserName);\n    }\n  }\n\n  function verifyUserRemove() {\n    var UserName = document.getElementById(\"UserName\").value;\n    var Event = eventName;\n\n    if (UserName.length === 0) {\n      alert(\"User Name is Required!\");\n      return;\n    } else if (Event == '') {\n      alert(\"Please Select an event\");\n      return;\n    } else {\n      RemoveUser(Event, UserName);\n    }\n  }\n\n  async function addUser(Event, UserName) {\n    //Initialize event document\n    const event = doc(db, 'event', Event);\n    let queue = []; //Query into firebase to read queue from document\n\n    const queuesQuery = query(collection(db, 'event'), limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n    );\n    const querySnapshot = await getDocs(queuesQuery);\n    const allDocs = querySnapshot.forEach(snap => {\n      if (snap.data().name == Event) {\n        queue = snap.data().queue;\n      }\n    }); //add user to queue\n\n    queue.push(UserName); //update document with new queue and number of people\n\n    updateDoc(event, {\n      numOfPeople: queue.length,\n      queue: queue\n    });\n    alert(\"Adding \" + UserName + \" to \" + Event);\n  }\n\n  async function RemoveUser(Event, UserName) {\n    //Initialize event document\n    const event = doc(db, 'event', Event);\n    let queue = []; //Query into firebase to read queue from document\n\n    const queuesQuery = query(collection(db, 'event'), limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n    );\n    const querySnapshot = await getDocs(queuesQuery);\n    const allDocs = querySnapshot.forEach(snap => {\n      if (snap.data().name == Event) {\n        queue = snap.data().queue;\n      }\n    }); //remove user from queue\n\n    queue = queue.filter(function (name) {\n      return name !== UserName;\n    }); //update document with new queue and number of people\n\n    updateDoc(event, {\n      numOfPeople: queue.length,\n      queue: queue\n    });\n    alert(\"Removing \" + UserName + \" from \" + Event);\n  } //Used so the admin can call the next person in line and remove them from the queue\n\n\n  async function removeFirstUser(Event) {\n    //add timestamp to document in order to be able to calculate average wait times\n    //stored in milliseconds since unix epoch\n    const currTime = Date.now(); //Initialize event document\n\n    const event = doc(db, 'event', Event);\n    let queue = [];\n    let dequeueTimes = []; //Query into firebase to read queue from document\n\n    const queuesQuery = query(collection(db, 'event'), limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n    );\n    const querySnapshot = await getDocs(queuesQuery);\n    querySnapshot.forEach(snap => {\n      if (snap.data().name == Event) {\n        queue = snap.data().queue;\n      }\n    });\n    querySnapshot.forEach(snap => {\n      if (snap.data().name == Event) {\n        dequeueTimes = snap.data().dequeueTimes;\n      }\n    });\n    var nextUser = queue.shift();\n\n    if (typeof nextUser === 'undefined') {\n      alert(\"tried to remove the next user but the queue is empty\");\n    } else if (queue.length > 0) {\n      dequeueTimes.push(currTime);\n    } else {\n      //when the line ends we want to dump data so that this line does not affect the average wait time for the next line\n      //We do this since there may be changing variables, eg. staffing, new system, etc.\n      dequeueTimes = [];\n    }\n\n    updateDoc(event, {\n      numOfPeople: queue.length,\n      queue: queue,\n      dequeueTimes: dequeueTimes\n    });\n    return nextUser;\n  }\n\n  function verifyEvent() {\n    var eventName = document.getElementById(\"eventName\").value;\n    var address = document.getElementById(\"address\").value;\n\n    if (eventName.length === 0) {\n      alert(\"Event Name is Required!\");\n      return;\n    } else {\n      addEvent(eventName, address);\n    }\n  }\n\n  function addEvent(eventName, addressInput) {\n    const path = 'event/' + eventName;\n    const newEvent = doc(db, path);\n    const docData = {\n      address: addressInput,\n      name: eventName,\n      numOfPeople: 0,\n      queue: [],\n      id: Date.now().toString(36) + Math.floor(Math.pow(10, 12) + Math.random() * 9 * Math.pow(10, 12)).toString(36)\n    };\n    setDoc(newEvent, docData);\n    alert(\"Adding \" + eventName + \" to database\");\n  }\n\n  function generateQR() {\n    var eventName = document.getElementById(\"eventName\").value;\n    ReactDOM.render( /*#__PURE__*/_jsxDEV(QRCode, {\n      value: window.location.hostname + /user/ + eventName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 21\n    }, this), document.getElementById(\"qrcode\")); //var qrc = new QRCode(document.getElementById(\"qrcode\"), eventName);\n    //document.getElementById(\"qrcode\").innerHTML = qrc;\n  }\n\n  async function showExistingQueues() {\n    const queuesQuery = query(collection(db, 'event'), limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n    );\n    const querySnapshot = await getDocs(queuesQuery);\n    var listOfQueues = \"\";\n    const allDocs = querySnapshot.forEach(snap => {\n      listOfQueues += snap.data().name + \" - \" + JSON.stringify(snap.data()) + \"<br/>\";\n    });\n    document.getElementById(\"queues\").innerHTML = listOfQueues;\n  }\n\n  function goToUserPage() {\n    navigate('/user');\n  }\n} //Dropdwon element creation\n\n_s(AdminPage, \"TSpcAJy5vFDlM2F9WeVKgInYw/I=\", false, function () {\n  return [useAuthState, useNavigate];\n});\n\n_c = AdminPage;\n\nconst Dropdown = _ref => {\n  let {\n    label,\n    value,\n    options,\n    onChange\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [label, /*#__PURE__*/_jsxDEV(\"select\", {\n      value: value,\n      onChange: onChange,\n      children: options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.value,\n        children: option.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 7\n  }, this);\n};\n\n_c2 = Dropdown;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AdminPage\");\n$RefreshReg$(_c2, \"Dropdown\");","map":{"version":3,"names":["ReactDOM","React","useEffect","useState","useID","GetInLineTitle","useNavigate","QRCode","Event","auth","db","logout","collection","doc","getDocs","query","setDoc","limit","onSnapshot","deleteDoc","updateDoc","where","async","useAuthState","AdminPage","user","loading","error","name","setName","navigate","fetchUserName","q","uid","data","docs","err","console","alert","events","setEvents","eventList","querySnapshot","eventsArray","forEach","push","id","handleDelete","eventName","options1","options","i","length","label","value","unshift","setValue","handleChange","selected","target","map","event","showExistingQueues","goToUserPage","verifyEvent","generateQR","verifyUserAdd","verifyUserRemove","UserName","document","getElementById","addUser","RemoveUser","queue","queuesQuery","allDocs","snap","numOfPeople","filter","removeFirstUser","currTime","Date","now","dequeueTimes","nextUser","shift","address","addEvent","addressInput","path","newEvent","docData","toString","Math","floor","pow","random","render","window","location","hostname","listOfQueues","JSON","stringify","innerHTML","Dropdown","onChange","option"],"sources":["/Users/valeriapalacios/Documents/Fall 2022/Junior Design/Get_In_Line/JIA-2500-main/get-in-line/src/pages/AdminPage.js"],"sourcesContent":["import ReactDOM from \"react-dom\";\nimport React, { useEffect, useState, useID } from \"react\";\nimport GetInLineTitle from '../components/GetInLineTitle';\nimport { useNavigate } from 'react-router-dom';\nimport QRCode from 'react-qr-code'\nimport Event from '../components/Event';\n\nimport { auth, db, logout } from '../Firebase';\nimport { collection, doc, getDocs, query, setDoc, limit, onSnapshot, deleteDoc, updateDoc, where } from 'firebase/firestore';\nimport { async } from '@firebase/util';\n\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\n\n\nexport default function AdminPage() {\n\n\n  const [user, loading, error] = useAuthState(auth);\n  const [name, setName] = useState(\"\");\n  const navigate = useNavigate();\n  const fetchUserName = async () => {\n      try {\n        const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user?.uid));\n        const doc = await getDocs(q);\n        const data = doc.docs[0].data();\n        setName(data.name);\n\n      } catch (err) {\n        console.error(err);\n        alert(\"An error occured while fetching user data\");\n      }\n    };\n    useEffect(() => {\n      if (loading) return;\n      if (!user) return navigate(\"/\");\n      fetchUserName();\n    }, [user, loading]);\n\n  const [events, setEvents] = React.useState([]);\n\n  React.useEffect(() => {\n    const q = query(collection(db, \"event\"));\n    const eventList = onSnapshot(q, (querySnapshot) => {\n      let eventsArray = [];\n      querySnapshot.forEach((doc) => {\n        eventsArray.push({ ...doc.data(), id: doc.id });\n      });\n      setEvents(eventsArray);\n    });\n    return () => eventList();\n  }, []);\n\n  const handleDelete = async (eventName) => {\n    await deleteDoc(doc(db, \"event\", eventName));\n  };\n\n\n\n  // ----Dropdown code----\n  let options1 = events;\n  let options = []\n  for (let i = 0; i < options1.length; i++) {\n    options[i] = {label: options1[i].name, value: options1[i].name};\n  }\n\n  //add empty string to events list to avoid errors with default state\n  options.unshift('');\n\n  const [value, setValue] = React.useState('');\n\n  const handleChange = (selected) => {\n      setValue(selected.target.value);\n  };\n\n  let eventName = value\n  // ----Dropdown code----\n  return (\n    <div>\n      <GetInLineTitle/>\n        <p id='queues'></p>\n        <div className='event_container'>\n          {events.map((event) => (\n            <Event\n              //key={event.name}\n              event={event}\n              handleDelete={handleDelete}\n            />\n          ))}\n        </div>\n        <button onClick={() => showExistingQueues()}>\n          View Existing Queues\n          </button>\n        <button> Settings </button>\n        <button onClick={() => goToUserPage()} > Go To User Page </button>\n        <button className=\"dashboard__btn\" onClick={logout}>\n          Logout\n         </button>\n        <br/><br/><br/><hr/><br/><br/><br/>\n        Event Name* <input type=\"text\" id=\"eventName\"/> <br/>\n        Address <input type=\"text\" id=\"address\"/> <br/>\n        <button onClick={() => verifyEvent()}> Add Event </button>\n        <button onClick={() => generateQR()}> Create QR Code </button>\n        <div id=\"qrcode\"> </div>\n        <p></p>\n        <Dropdown\n                label=\"Select an Event \"\n                options={options}\n                value={value}\n                onChange={handleChange}\n        /> <br/>\n        User Name* <input type=\"text\" id=\"UserName\"/> <br/>\n        <button onClick={() => verifyUserAdd()}> Add User </button>\n        <button onClick={() => verifyUserRemove()}> Remove User </button>\n    </div>\n  )\n\n\n// ----------------------- Functions -----------------------\n  function verifyUserAdd() {\n    var UserName = document.getElementById(\"UserName\").value;\n    var Event = eventName;\n\n    if (UserName.length === 0) {\n      alert(\"User Name is Required!\")\n      return;\n    } else if (Event == '') {\n      alert(\"Please Select an event\")\n      return;\n    } else {\n      addUser(Event, UserName);\n    }\n  }\n\n  function verifyUserRemove() {\n    var UserName = document.getElementById(\"UserName\").value;\n    var Event = eventName;\n\n\n    if (UserName.length === 0) {\n      alert(\"User Name is Required!\")\n      return;\n    } else if (Event == '') {\n      alert(\"Please Select an event\")\n      return;\n    } else {\n      RemoveUser(Event, UserName);\n    }\n  }\n\n async function addUser(Event, UserName) {\n    //Initialize event document\n    const event = doc(db, 'event', Event);\n    let queue = [];\n\n    //Query into firebase to read queue from document\n    const queuesQuery = query(\n      collection(db, 'event'),\n      limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n    );\n\n    const querySnapshot = await getDocs(queuesQuery);\n    const allDocs = querySnapshot.forEach((snap) => {\n      if (snap.data().name == Event) {\n        queue = snap.data().queue;\n      }\n    });\n\n    //add user to queue\n    queue.push(UserName);\n\n    //update document with new queue and number of people\n    updateDoc(event, {\n      numOfPeople: queue.length,\n      queue: queue\n    });\n\n    alert(\"Adding \" + UserName + \" to \" + Event);\n  }\n\n  async function RemoveUser(Event, UserName) {\n    //Initialize event document\n    const event = doc(db, 'event', Event);\n    let queue = [];\n\n    //Query into firebase to read queue from document\n    const queuesQuery = query(\n      collection(db, 'event'),\n      limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n    );\n\n    const querySnapshot = await getDocs(queuesQuery);\n    const allDocs = querySnapshot.forEach((snap) => {\n      if (snap.data().name == Event) {\n        queue = snap.data().queue;\n      }\n    });\n\n    //remove user from queue\n    queue = queue.filter(function(name) {\n      return name !== UserName\n    })\n\n    //update document with new queue and number of people\n    updateDoc(event, {\n      numOfPeople: queue.length,\n      queue: queue\n    });\n\n    alert(\"Removing \" + UserName + \" from \" + Event);\n  }\n\n\n  //Used so the admin can call the next person in line and remove them from the queue\n  async function removeFirstUser(Event) {\n\n    //add timestamp to document in order to be able to calculate average wait times\n    //stored in milliseconds since unix epoch\n    const currTime = Date.now()\n    //Initialize event document\n    const event = doc(db, 'event', Event);\n    let queue = [];\n    let dequeueTimes = []\n\n\n    //Query into firebase to read queue from document\n    const queuesQuery = query(\n      collection(db, 'event'),\n      limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n    );\n\n    const querySnapshot = await getDocs(queuesQuery);\n    querySnapshot.forEach((snap) => {\n      if (snap.data().name == Event) {\n        queue = snap.data().queue;\n      }\n    });\n\n    querySnapshot.forEach((snap) => {\n      if (snap.data().name == Event) {\n        dequeueTimes = snap.data().dequeueTimes;\n      }\n    });\n\n    var nextUser = queue.shift()\n\n    if (typeof nextUser === 'undefined') {\n      alert(\"tried to remove the next user but the queue is empty\")\n    }\n    else if (queue.length > 0) {\n      dequeueTimes.push(currTime)\n    }\n    else {\n      //when the line ends we want to dump data so that this line does not affect the average wait time for the next line\n      //We do this since there may be changing variables, eg. staffing, new system, etc.\n      dequeueTimes = []\n    }\n    \n\n    updateDoc(event, {\n      numOfPeople: queue.length,\n      queue: queue,\n      dequeueTimes: dequeueTimes\n    });\n\n    return nextUser\n  }\n\n\n\n  function verifyEvent() {\n    var eventName = document.getElementById(\"eventName\").value;\n    var address = document.getElementById(\"address\").value;\n\n    if (eventName.length === 0) {\n      alert(\"Event Name is Required!\")\n      return;\n    } else {\n      addEvent(eventName, address);\n    }\n  }\n\n  function addEvent(eventName, addressInput) {\n    const path = 'event/' + eventName;\n    const newEvent = doc(db, path);\n    \n    const docData = {\n      address: addressInput,\n      name: eventName,\n      numOfPeople: 0,\n      queue: [],\n      id: Date.now().toString(36) + Math.floor(Math.pow(10, 12) + Math.random() * 9*Math.pow(10, 12)).toString(36)\n    };\n    setDoc(newEvent, docData);\n    alert(\"Adding \" + eventName + \" to database\");\n    \n  }\n\n  function generateQR(){\n    var eventName = document.getElementById(\"eventName\").value;\n    ReactDOM.render(<QRCode value={window.location.hostname +/user/ +eventName} />, document.getElementById(\"qrcode\"));\n    //var qrc = new QRCode(document.getElementById(\"qrcode\"), eventName);\n    //document.getElementById(\"qrcode\").innerHTML = qrc;\n  }\n\n  async function showExistingQueues() {\n    const queuesQuery = query(\n      collection(db, 'event'),\n      limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n    );\n\n    const querySnapshot = await getDocs(queuesQuery);\n    var listOfQueues = \"\";\n    const allDocs = querySnapshot.forEach((snap) => {\n      listOfQueues += snap.data().name + \" - \" + JSON.stringify(snap.data()) + \"<br/>\";\n    });\n\n    document.getElementById(\"queues\").innerHTML = listOfQueues;\n  }\n\n  function goToUserPage() {\n    navigate('/user');\n  }\n\n}\n\n//Dropdwon element creation\nconst Dropdown = ({ label, value, options, onChange }) => {\n  return (\n      <label>\n      {label}\n      <select value={value} onChange={onChange}>\n          {options.map((option) => (\n          <option value={option.value}>{option.label}</option>\n          ))}\n      </select>\n      </label>\n);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}