{"ast":null,"code":"var _jsxFileName = \"/Users/valeriapalacios/Documents/Fall 2022/Junior Design/Get_In_Line/JIA-2500-main/get-in-line/src/pages/EventDisplayPage.js\",\n    _s = $RefreshSig$();\n\nimport { useParams } from 'react-router-dom';\nimport { collection, doc, getDocs, query, setDoc, limit, onSnapshot, deleteDoc, updateDoc, where, arrayRemove } from 'firebase/firestore';\nimport LogoutButton from '../components/LogoutButton';\nimport { auth, db, logout, registerWithEmailAndPassword } from '../Firebase';\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EventDisplayPage() {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, loading, error] = useAuthState(auth);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (loading) {\n      // maybe trigger a loading screen\n      return;\n    }\n  }, [user, loading]); ///////////////////////////////////////\n  //SMS class, used to send texts to user\n\n  class SMS extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        text: {\n          recipient: '',\n          textmessage: 'Youre in line for ' + eventName + '!'\n        }\n      };\n\n      this.sendTextAddUser = _ => {\n        const {\n          text\n        } = this.state; //pass text message GET variables via query string\n\n        fetch(`http://localhost:4000/send-text?recipient=${text.recipient}&textmessage=${text.textmessage}`).catch(err => console.error(err)); //add user to queue on same button click\n\n        verifyUserAdd();\n      };\n    }\n\n    //what shows up on UI\n    render() {\n      const {\n        text\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Phone #* \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: text.recipient,\n          onChange: e => this.setState({\n            text: { ...text,\n              recipient: e.target.value\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.sendTextAddUser,\n          children: \" Submit \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this);\n    }\n\n  } ///////////////////////////////////////\n\n\n  const [needUserInfo, setNeedUserInfo] = React.useState(false);\n\n  const promptInfo = () => {\n    setNeedUserInfo(true);\n  };\n\n  const {\n    eventName\n  } = useParams();\n\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: eventName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"distanceFromUser\",\n        children: \"Distance from you: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"numberOfPeopleInLine\",\n        children: \"Current number of people in line: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Estimated waiting time:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), \"Name* \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 50\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), \"Email* \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 20\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 52\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SMS, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 10\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: eventName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"distanceFromUser\",\n        children: \"Distance from you: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Current number of people in line: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Estimated waiting time:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => verifyUserRemove(user.email),\n        children: \" Dequeue \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }, this);\n  }\n\n  function verifyUserRemove(email) {\n    var Event = eventName;\n    RemoveUser(Event, email);\n  }\n\n  async function RemoveUser(Event, UserEmail) {\n    //Initialize event document\n    const event = doc(db, 'event', Event);\n    let queue = []; //Query into firebase to read queue from document\n\n    const queuesQuery = query(collection(db, 'event'), limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n    );\n    const querySnapshot = await getDocs(queuesQuery);\n    const allDocs = querySnapshot.forEach(snap => {\n      if (snap.data().name == Event) {\n        queue = snap.data().queue;\n      }\n    }); //remove user from queue\n\n    queue = queue.filter(function (name) {\n      return name !== UserEmail;\n    }); //update document with new queue and number of people\n\n    updateDoc(event, {\n      numOfPeople: queue.length,\n      queue: queue\n    });\n    alert(\"Removing \" + UserEmail + \" from \" + Event);\n    user.delete().then(function () {// User deleted.\n    }, function (error) {// An error happened.\n    });\n  }\n\n  function verifyUserAdd() {\n    var Name = document.getElementById(\"Name\").value;\n    var Email = document.getElementById(\"Email\").value;\n    var Event = eventName;\n\n    if (Name.length == 0) {\n      alert(\"Please enter your name\");\n      return;\n    } else if (Email.length == 0) {\n      alert(\"Please enter your email\");\n      return;\n    } else {\n      addUser(Event, Name, Email);\n    }\n  }\n\n  async function addUser(Event, UserName, UserEmail) {\n    //Initialize event document\n    const path = 'event/' + Event;\n    const event = doc(db, 'event', Event);\n    let queue = []; //Query into firebase to read queue from document\n\n    const queuesQuery = query(collection(db, 'event'), limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n    );\n    const querySnapshot = await getDocs(queuesQuery);\n    const allDocs = querySnapshot.forEach(snap => {\n      if (snap.data().name == Event) {\n        queue = snap.data().queue;\n      }\n    }); //add user to queue\n\n    queue.push(UserEmail);\n    registerWithEmailAndPassword(UserName, UserEmail, \"TemporaryMeasure123\", false); //update document with new queue and number of people\n\n    updateDoc(event, {\n      numOfPeople: queue.length,\n      queue: queue\n    });\n    alert(\"Adding \" + UserName + \" to \" + Event);\n  }\n\n  async function calculateAverageWait(event) {\n    let dequeueTimes = [];\n    const queuesQuery = query(collection(db, 'event'), limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n    );\n    const querySnapshot = await getDocs(queuesQuery);\n    querySnapshot.forEach(snap => {\n      if (snap.data().name == Event) {\n        dequeueTimes = snap.data().dequeueTimes;\n      }\n    }); //need at least two times in order to be able to calculate average wait\n\n    if (dequeueTimes.length < 2) {\n      return NaN;\n    }\n\n    let numPeople = 0;\n    let accumulatedTime = 0;\n\n    for (; numPeople + 1 < dequeueTimes.length; numPeople++) {\n      accumulatedTime += dequeueTimes[numPeople] - dequeueTimes[numPeople + 1];\n    }\n\n    return accumulatedTime / numPeople;\n  } // async function getWaitFor(event, userName) {\n  //   const average = calculateAverageWait(event)\n  //   let queue = [];\n  //   const querySnapshot = await getDocs(queuesQuery);\n  //   querySnapshot.forEach((snap) => {\n  //     if (snap.data().name == Event) {\n  //       queue = snap.data().queue;\n  //     }\n  //   });\n  //   let location = queue.indexOf(userName)\n  // }\n\n}\n\n_s(EventDisplayPage, \"UERvrT0qkqq4mI5qlp5u97nbX+Q=\", false, function () {\n  return [useAuthState, useNavigate, useParams];\n});\n\n_c = EventDisplayPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventDisplayPage\");","map":{"version":3,"names":["useParams","collection","doc","getDocs","query","setDoc","limit","onSnapshot","deleteDoc","updateDoc","where","arrayRemove","LogoutButton","auth","db","logout","registerWithEmailAndPassword","useAuthState","Link","useNavigate","React","useState","useEffect","EventDisplayPage","email","setEmail","password","setPassword","user","loading","error","navigate","SMS","Component","state","text","recipient","textmessage","eventName","sendTextAddUser","_","fetch","catch","err","console","verifyUserAdd","render","e","setState","target","value","needUserInfo","setNeedUserInfo","promptInfo","verifyUserRemove","Event","RemoveUser","UserEmail","event","queue","queuesQuery","querySnapshot","allDocs","forEach","snap","data","name","filter","numOfPeople","length","alert","delete","then","Name","document","getElementById","Email","addUser","UserName","path","push","calculateAverageWait","dequeueTimes","NaN","numPeople","accumulatedTime"],"sources":["/Users/valeriapalacios/Documents/Fall 2022/Junior Design/Get_In_Line/JIA-2500-main/get-in-line/src/pages/EventDisplayPage.js"],"sourcesContent":["import { useParams } from 'react-router-dom'\n\nimport { collection, doc, getDocs, query, setDoc, limit, onSnapshot, deleteDoc, updateDoc, where, arrayRemove } from 'firebase/firestore';\nimport LogoutButton from '../components/LogoutButton';\nimport { auth, db, logout, registerWithEmailAndPassword, } from '../Firebase';\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\n\nexport default function EventDisplayPage() {\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, loading, error] = useAuthState(auth);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (loading) {\n      // maybe trigger a loading screen\n      return;\n    }\n\n  }, [user, loading]);\n  ///////////////////////////////////////\n  //SMS class, used to send texts to user\n  class SMS extends React.Component {\n    state = {\n        text: {\n          recipient: '',\n          textmessage: 'Youre in line for ' + eventName + '!'\n        }\n      }\n\n      //Sends text and adds user to queue\n      sendTextAddUser = _ => {\n        const { text } = this.state;\n        //pass text message GET variables via query string\n        fetch(`http://localhost:4000/send-text?recipient=${text.recipient}&textmessage=${text.textmessage}`)\n        .catch(err => console.error(err))\n\n        //add user to queue on same button click\n        verifyUserAdd();\n      }\n\n      //what shows up on UI\n      render() {\n        const { text } = this.state;\n        return (\n            <div >\n              Phone #* <input value={text.recipient}\n                onChange={e => this.setState({ text: { ...text, recipient: e.target.value } })} />\n              <p></p>\n              <button onClick={this.sendTextAddUser}> Submit </button>\n            </div>\n        );\n      }\n  }\n  ///////////////////////////////////////\n\n\n\n  const [needUserInfo, setNeedUserInfo] = React.useState(false);\n    const promptInfo = () => {\n        setNeedUserInfo(true);\n    };\n    const {eventName} = useParams();\n\n\tif (!user) {\n        return (\n        \t<div>\n            <p></p>\n            <h2>{eventName}</h2>\n            <p id='distanceFromUser'>Distance from you: </p>\n            <p id='numberOfPeopleInLine'>Current number of people in line: </p>\n            <p>Estimated waiting time:</p>\n            Name* <input type=\"text\" id=\"Name\"/> <br/>\n            <p></p>\n            Email* <input type=\"text\" id=\"Email\"/> <br/>\n            <p></p>\n            <SMS />\n            <p></p>\n\n            </div>\n        );\n    } else {\n        return (\n        \t<div>\n            <p></p>\n            <h2>{eventName}</h2>\n            <p id='distanceFromUser'>Distance from you: </p>\n            <p>Current number of people in line: </p>\n            <p>Estimated waiting time:</p>\n\n            <button onClick={() =>verifyUserRemove(user.email)}> Dequeue </button>\n            <p></p>\n          </div>\n\n        );\n    }\n\n\n\tfunction verifyUserRemove(email) {\n        var Event = eventName;\n        RemoveUser(Event, email);\n\n    }\n\n    async function RemoveUser(Event, UserEmail) {\n      //Initialize event document\n      const event = doc(db, 'event', Event);\n      let queue = [];\n\n      //Query into firebase to read queue from document\n      const queuesQuery = query(\n        collection(db, 'event'),\n        limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n      );\n\n      const querySnapshot = await getDocs(queuesQuery);\n      const allDocs = querySnapshot.forEach((snap) => {\n        if (snap.data().name == Event) {\n          queue = snap.data().queue;\n        }\n      });\n\n      //remove user from queue\n      queue = queue.filter(function(name) {\n        return name !== UserEmail\n      })\n\n      //update document with new queue and number of people\n      updateDoc(event, {\n        numOfPeople: queue.length,\n        queue: queue\n      });\n\n      alert(\"Removing \" + UserEmail + \" from \" + Event);\n\n      \n      user.delete().then(function() {\n        // User deleted.\n      }, function(error) {\n        // An error happened.\n      });\n    }\n\n    function verifyUserAdd() {\n        var Name = document.getElementById(\"Name\").value;\n        var Email = document.getElementById(\"Email\").value;\n        var Event = eventName;\n\n        if (Name.length == 0) {\n          alert(\"Please enter your name\")\n          return;\n        } else if (Email.length == 0) {\n            alert(\"Please enter your email\")\n            return;\n        } else {\n          addUser(Event, Name, Email);\n        }\n    }\n\n\tasync function addUser(Event, UserName, UserEmail) {\n        //Initialize event document\n        const path = 'event/' + Event;\n        const event = doc(db, 'event', Event);\n        let queue = [];\n\n        //Query into firebase to read queue from document\n        const queuesQuery = query(\n          collection(db, 'event'),\n          limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n        );\n\n        const querySnapshot = await getDocs(queuesQuery);\n        const allDocs = querySnapshot.forEach((snap) => {\n          if (snap.data().name == Event) {\n            queue = snap.data().queue;\n          }\n        });\n\n        //add user to queue\n        queue.push(UserEmail);\n\n        registerWithEmailAndPassword(UserName, UserEmail, \"TemporaryMeasure123\", false);\n\n        //update document with new queue and number of people\n        updateDoc(event, {\n          numOfPeople: queue.length,\n          queue: queue,\n        });\n\n\n        alert(\"Adding \" + UserName + \" to \" + Event);\n    }\n\n    async function calculateAverageWait(event) {\n      let dequeueTimes = []\n  \n  \n      const queuesQuery = query(\n        collection(db, 'event'),\n        limit(100) // Just to make sure we're not querying more than 100 events. Can be removed if database grows and is needed\n      );\n  \n      const querySnapshot = await getDocs(queuesQuery);\n  \n  \n      querySnapshot.forEach((snap) => {\n        if (snap.data().name == Event) {\n          dequeueTimes = snap.data().dequeueTimes;\n        }\n      });\n  \n      //need at least two times in order to be able to calculate average wait\n      if (dequeueTimes.length < 2) {\n        return NaN\n      }\n  \n      let numPeople = 0\n      let accumulatedTime = 0\n      for (; numPeople + 1 < dequeueTimes.length; numPeople++) {\n        accumulatedTime += dequeueTimes[numPeople] - dequeueTimes[numPeople + 1]\n      }\n  \n      return accumulatedTime/numPeople\n  \n    }\n  \n    // async function getWaitFor(event, userName) {\n    //   const average = calculateAverageWait(event)\n    //   let queue = [];\n  \n    //   const querySnapshot = await getDocs(queuesQuery);\n    //   querySnapshot.forEach((snap) => {\n    //     if (snap.data().name == Event) {\n    //       queue = snap.data().queue;\n    //     }\n    //   });\n  \n    //   let location = queue.indexOf(userName)\n    // }\n  \n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}